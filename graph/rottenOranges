//done by me without any hint
// repetetive items can be stored in variable and code quaity can be increased


int orangesRotting(vector<vector<int>>& grid) {
        int t=0;
        int visited[grid.size()][grid[0].size()];
        queue<pair<int,int>> q;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                visited[i][j]=0;
                if(grid[i][j]==2) {
                    visited[i][j]=1;
                    q.push({i,j});
                }
            }
        }
        bool k=false;
        while(q.size()!=0){
            int size=q.size();
            for(int m=0;m<size;m++){
                if(q.front().first-1>=0 && grid[q.front().first-1][q.front().second]==1 
                    && !visited[q.front().first-1][q.front().second]){
                    visited[q.front().first-1][q.front().second]=1;
                    k=true;
                    grid[q.front().first-1][q.front().second]=2;
                    q.push({q.front().first-1,q.front().second});
                }
                if(q.front().second-1>=0 && grid[q.front().first][q.front().second-1]==1
                    && !visited[q.front().first][q.front().second-1]){
                    visited[q.front().first][q.front().second-1]=1;
                    k=true;
                    grid[q.front().first][q.front().second-1]=2;
                    q.push({q.front().first,q.front().second-1});
                }
                if(q.front().second+1<grid[0].size() && grid[q.front().first][q.front().second+1]==1 
                    && !visited[q.front().first][q.front().second+1]){
                    visited[q.front().first][q.front().second+1]=1;
                    k=true;
                    grid[q.front().first][q.front().second+1]=2;
                    q.push({q.front().first,q.front().second+1});
                }
                if(q.front().first+1<grid.size() && grid[q.front().first+1][q.front().second]==1 
                    && !visited[q.front().first+1][q.front().second]){
                    visited[q.front().first+1][q.front().second]=1;
                    k=true;
                    grid[q.front().first+1][q.front().second]=2;
                    q.push({q.front().first+1,q.front().second});
                }
                q.pop();
                }
                if(k) t++;
                k=false;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(grid[i][j]==1) return -1;
            }
        }
        return t;
    }
