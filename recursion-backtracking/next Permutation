in this question what I did was like(this was my intuition / I will improve from youtube for sure).
   -->I am taking boolean variable like whenever ith element is greater than i+1'th element we flag it that something is wrong
   --> and at any step if I find ith element is less than i+1th element then we unflag it.
   
---> NOw there can be two cases:
  1.--> if flag is not there means it is in ascending order we just swap last two elements and we are done.
  2.--> if flag is there then we do following steps:
        --> wherever flag was there we were marking it's index. and we change index to element where all problem start like example: 1 4 6 3 2 0 so we will take our index to 1(4) 
        point 1: after getting here we find the next greater element than 1 index(greater than 4 which is 6).
        we swap so now array become 1 6 4 3 2 0
        after that we swap reverse array from 2nd index to last.
        
       point 2:  if no greater element found and we come to starting index means whole array is descending , so we simply reverse it.
       
 my code: 
 
        vector<int> nextPermutation(int n, vector<int> arr){
      if(n==1) return arr;
      bool k=true;
      int idx=-1;
      for(int i=0;i<n-1;i++){
          if(arr[i]>arr[i+1]){
              idx=i;
              k=false;
          }
          else if(arr[i]==arr[i+1]) continue;
          
          else{
              idx=-1;
              k=true;
          }
      }
      if(!k){
          while(!k){
              while(idx>=0 && arr[idx]>arr[idx+1]) idx--;
              if(idx>=0){
                   int temp=n-1;
                   while(arr[temp]<=arr[idx]) temp--;
                   swap(arr[idx++],arr[temp]);
                   temp=n-1;
                   for(int i=idx;i<temp;i++) swap(arr[temp--],arr[idx++]);
              }
              else{
                  for(int i=0;i<(n/2);i++) swap(arr[i],arr[n-i-1]); 
              }
                   k=true;
          }
      }
      else{
          swap(arr[n-1],arr[n-2]);
      }
       return arr;
    }
