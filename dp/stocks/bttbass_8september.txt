
//dp with n*2 array

//Recursive + memoization
int maxProfit(vector<int>& arr) {
        int n=arr.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return solve(arr,0,0,dp);
    }

    int solve(vector<int>&arr,bool wtd,int ind,vector<vector<int>> &dp){
        if(ind==arr.size()) return 0;
        if(dp[ind][wtd]!=-1) return dp[ind][wtd];
        int ans;
        if(wtd==0){
            ans= max(-arr[ind]+solve(arr,!wtd,ind+1,dp),solve(arr,wtd,ind+1,dp));
        }
        else{
            ans= max(arr[ind]+solve(arr,!wtd,ind+1,dp),solve(arr,wtd,ind+1,dp));
        }
        return dp[ind][wtd]=ans;
    }

//tabulation

int n=arr.size();
        int dp[n+1][2];
        for(int i=0;i<2;i++) dp[n][i]=0;
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j==0) dp[i][j]=max(0+dp[i+1][0],-arr[i]+dp[i+1][1]);
                else    dp[i][j]=max(0+dp[i+1][1],arr[i]+dp[i+1][0]);
            }
        }
        return dp[0][0];
