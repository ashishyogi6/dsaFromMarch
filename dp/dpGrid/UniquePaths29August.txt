//Leetcode

//recursive
int uniquePaths(int m, int n) {
        return solve(0,0,m,n);
    }
    int solve(int starti,int startj,int &m,int &n){
        if(starti==m-1 && startj==n-1) return 1;
        if(starti==m-1) return solve(starti,startj+1,m,n);
        else if(startj==n-1) return solve(starti+1,startj,m,n);
        else return solve(starti,startj+1,m,n)+solve(starti+1,startj,m,n);
    }

//memoized

int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return solve(0,0,m,n,dp);
    }
    int solve(int i,int j,int &m,int &n,vector<vector<int>> &dp){
        if(i==m-1 && j==n-1) return 1;

        if(dp[i][j]!=-1) return dp[i][j];

        if(i==m-1) return dp[i][j]=solve(i,j+1,m,n,dp);
        else if(j==n-1) return dp[i][j]=solve(i+1,j,m,n,dp);
        else return dp[i][j]=solve(i,j+1,m,n,dp)+solve(i+1,j,m,n,dp);
    }
//tabulation:
int uniquePaths(int m, int n) {
        int dp[m][n];
        dp[0][0]=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) continue;
                int up=0,left=0;
                if(i>0) up=dp[i-1][j];
                if(j>0) left=dp[i][j-1];
                dp[i][j]=up+left;
            }
        }
        return dp[m-1][n-1];
    }
