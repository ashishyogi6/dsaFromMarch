// recursive+memoization

int minimumTotal(vector<vector<int>>& triangle) {
        vector<vector<int>> dp(triangle.size(),vector<int>(triangle.size(),-1));
        return triangle[0][0]+solve(1,0,triangle,dp);
    }

    int solve(int i,int j,vector<vector<int>> &triangle,vector<vector<int>> &dp){
        if(i==triangle.size()) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int left=triangle[i][j]+solve(i+1,j,triangle,dp);
        int right=triangle[i][j+1]+solve(i+1,j+1,triangle,dp);
        return dp[i][j]=min(left,right);
    }

//tabulation:
 int minimumTotal(vector<vector<int>>& triangle) {
        vector<vector<int>> dp(triangle.size(),vector<int>(triangle.size(),-1));
        dp[0][0]=triangle[0][0];
        for(int i=1;i<triangle.size();i++){
            for(int j=0;j<=i;j++){
                if(j==0) dp[i][j]=triangle[i][j]+dp[i-1][j];
                else if(j==i) dp[i][j]=triangle[i][j]+dp[i-1][j-1];
                else{
                    dp[i][j]=triangle[i][j]+min(dp[i-1][j],dp[i-1][j-1]);
                }
            }
        }
        int mini=INT_MAX;
        for(int i=0;i<triangle.size();i++){
            if(dp[triangle.size()-1][i]<mini) mini=dp[triangle.size()-1][i];
        }
        return mini;
    }
