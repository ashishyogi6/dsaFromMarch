

//recursive+memoization:
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        vector<vector<int>> dp(obstacleGrid.size(),vector<int>(obstacleGrid[0].size(),-1));
        return solve(0,0,obstacleGrid,dp);
    }
    int solve(int i,int j,vector<vector<int>> &obstacleGrid,vector<vector<int>> &dp){
        if(i>=obstacleGrid.size() || j>=obstacleGrid[0].size() || obstacleGrid[i][j]==1) return 0;
        if(i==obstacleGrid.size()-1 && j==obstacleGrid[0].size()-1) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        int right=solve(i,j+1,obstacleGrid,dp);
        int down=solve(i+1,j,obstacleGrid,dp);
        return dp[i][j]=right+down;
    }

//tabulation:
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0]==1) return 0;
        int n=obstacleGrid.size(),m=obstacleGrid[0].size();
        vector<vector<int>> dp(obstacleGrid.size(),vector<int>(obstacleGrid[0].size(),-1));
        dp[0][0]=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0) continue;
                if(obstacleGrid[i][j]==1) {
                    dp[i][j]=0;
                    continue;
                }
                int up=0,left=0;
                if(i>0){
                    if(obstacleGrid[i-1][j]!=1) up=dp[i-1][j];
                    else up=0;
                }
                if(j>0){
                    if(obstacleGrid[i][j-1]!=1) left=dp[i][j-1];
                    else left=0;
                }
                dp[i][j]=up+left;
            }
        }
        return dp[n-1][m-1];
    }
