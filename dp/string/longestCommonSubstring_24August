24 August 06:30 PM
https://practice.geeksforgeeks.org/problems/longest-common-substring1452/1

Recursive: 
string str1,str2;
    int maxi=0;
    int longestCommonSubstr (string s1, string s2, int n, int m)
    {
        str1=s1;
        str2=s2;
        solve(n,m);
        return maxi;
    }
    
    int solve(int n,int m){
        if(n==0 || m==0) return 0;
        int ans=0;
        if(str1[n-1]==str2[m-1]){
            ans= 1+solve(n-1,m-1);
            maxi=max(maxi,ans);
        }
        solve(n-1,m);
        solve(n,m-1);
        return ans;
    }

Memoized:
public:
    string str1,str2;
    int maxi=0;
    int longestCommonSubstr (string s1, string s2, int n, int m)
    {
        str1=s1;
        str2=s2;
        vector<vector<int>> dp(n,vector<int>(m+1,-1));
        solve(n,m,dp);
        return maxi;
    }
    
    int solve(int n,int m,vector<vector<int>> &dp){
        if(n==0 || m==0) return 0;
        
        if(dp[n-1][m-1]!=-1) return dp[n-1][m-1];
        dp[n-1][m-1]=0;
        if(str1[n-1]==str2[m-1]){
            dp[n-1][m-1]= 1+solve(n-1,m-1,dp);
            maxi=max(maxi,dp[n-1][m-1]);
        }
        solve(n-1,m,dp);
        solve(n,m-1,dp);
        return dp[n-1][m-1];
    }

tabulation:
int longestCommonSubstr (string s1, string s2, int n, int m)
    {
        int maxi=0;
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++) dp[i][0]=0;
        for(int i=0;i<=m;i++) dp[0][i]=0;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                    maxi=max(maxi,dp[i][j]);
                }
                else dp[i][j]=0;
            }
        }
        return maxi;
    }
