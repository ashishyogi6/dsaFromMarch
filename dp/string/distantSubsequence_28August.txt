
//Leetcode
int mod=1e9+7;
    int numDistinct(string s, string t) {
        vector<vector<int>> dp(s.length(),vector<int>(t.length(),-1));
        int k=solve(s,t,s.length(),t.length(),dp);
        if(k==654905827) return -1;
        return k;
    }

    int solve(string &s,string &t,int i1,int i2,vector<vector<int>> &dp){
        if(i2==0){
            return 1;
        }
        if(i1==0) return 0;
        if(dp[i1-1][i2-1]!=-1)  return dp[i1-1][i2-1];
        if(s[i1-1]==t[i2-1]){
            int take=solve(s,t,i1-1,i2-1,dp);
            int stay=solve(s,t,i1-1,i2,dp);
            return dp[i1-1][i2-1]=(stay+take)%mod;
            
        }
        else{
            return dp[i1-1][i2-1]=solve(s,t,i1-1,i2,dp);
        }
        
    }

//tabulation:

int mod=1e9+7;
    int numDistinct(string s, string t) {
        int n=s.length(),m=t.length();
        int dp[n+1][m+1];
        for(int i=0;i<=m;i++) dp[0][i]=0;
        for(int i=0;i<=n;i++) dp[i][0]=1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) dp[i][j]=(dp[i-1][j-1]+dp[i-1][j])%mod;
                else dp[i][j]=dp[i-1][j];
            }
        }
        if(dp[n][m]==654905827) return -1;
        return dp[n][m];
    }
