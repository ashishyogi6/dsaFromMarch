leetcode

memoization:
string s1,s2;
    int longestCommonSubsequence(string text1, string text2) {
        s1=text1,s2=text2;
        vector<vector<int>> dp(text1.size(),vector<int>(text2.size(),-1));
        return solve(text1.size(),text2.size(),dp);
    }

    int solve(int ind1,int ind2,vector<vector<int>> &dp){
        if(ind1==0 || ind2==0) return 0;

        if(dp[ind1-1][ind2-1]!=-1) return dp[ind1-1][ind2-1];
        else{
            if(s1[ind1-1]==s2[ind2-1]) return dp[ind1-1][ind2-1]=1+solve(ind1-1,ind2-1,dp);
            else{
                return dp[ind1-1][ind2-1]=max(solve(ind1-1,ind2,dp),solve(ind1,ind2-1,dp));
            }
        }
    }

    top-down:
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size(),m=text2.size();
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++) dp[i][0]=0;
        for(int i=0;i<=m;i++) dp[0][i]=0;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(text1[i-1]==text2[j-1]) dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
            }
        }
        return dp[n][m];
       // return solve(text1.size(),text2.size(),dp);
    }
