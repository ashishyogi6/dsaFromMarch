https://practice.geeksforgeeks.org/problems/rod-cutting0840/1

//done by self :)
recursive solution:
int cutRod(int price[], int n) {
        return solve(0,price,n,n);
    }
    
    int solve(int index,int *price,int n,int remaining){
        if(remaining<=0 || index==n){
            return 0;
        }
        int take=0;
         if(remaining>=index+1) take=price[index]+solve(index,price,n,remaining-index-1);
         
         return max(take,solve(index+1,price,n,remaining));
        
    }

memoized:
int cutRod(int price[], int n) {
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        return solve(0,price,n,n,dp);
    }
    
    int solve(int index,int *price,int n,int remaining,vector<vector<int>> &dp){
        if(remaining<=0 || index==n){
            return 0;
        }
        
        if(dp[index][remaining]!=-1) return dp[index][remaining];
        
        int take=0;
         if(remaining>=index+1) take=price[index]+solve(index,price,n,remaining-index-1,dp);
         
         return dp[index][remaining]=max(take,solve(index+1,price,n,remaining,dp));
        
    }

tabulation:
int cutRod(int price[], int n) {
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        for(int i=0;i<n+1;i++) {
            dp[i][0]=0;
            dp[0][i]=0;
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<n+1;j++){
                if(j>=i) dp[i][j]=max(dp[i-1][j],dp[i][j-i]+price[i-1]);
                else dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][n];
    }
