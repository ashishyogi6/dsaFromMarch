https://practice.geeksforgeeks.org/problems/geek-jump/1
//done by self

 int n;
  public:
    int minimumEnergy(vector<int>& height, int N) {
        n=N;
        vector<int> dp(n,-1);
        dp[n-1]=0;
        solve(0,dp,height);
        return dp[0];
    }
    
    void solve(int index,vector<int> &dp,vector<int>& height){
        if(index>=n) return;
        if(index==n-2){
            dp[n-2]=abs(height[n-2]-height[n-1]);
            return;
        }
        if(dp[index]==-1){
            solve(index+1,dp,height);
            dp[index]=min(abs(height[index]-height[index+1])+dp[index+1],abs(height[index]-height[index+2])+dp[index+2]);
        }
        
    }

// by tabulation we can do it in only O(n)

//and by space optimization

int main() {

  vector<int> height{30,10,60,10,60,50};
  int n=height.size();
  int prev=0;
  int prev2=0;
  for(int i=1;i<n;i++){
      
      int jumpTwo = INT_MAX;
      int jumpOne= prev + abs(height[i]-height[i-1]);
      if(i>1)
        jumpTwo = prev2 + abs(height[i]-height[i-2]);
    
      int cur_i=min(jumpOne, jumpTwo);
      prev2=prev;
      prev=cur_i;
        
  }
  cout<<prev;
}

  
