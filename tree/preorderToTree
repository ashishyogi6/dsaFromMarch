https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/description/


done by me
TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root= new TreeNode(preorder[0]);
        int i=1;
        solve(root,INT_MIN,INT_MAX,preorder,i);
        return root;
    }

    void solve(TreeNode* root, int min, int max,vector<int> &preorder, int &i){
        while(true){
            if(i==preorder.size()) break;

            if(preorder[i]<root->val && preorder[i]>min){
                root->left= new TreeNode(preorder[i]);
                solve(root->left,min,root->val,preorder,i+=1);
            }
            else if(preorder[i]>root->val && preorder[i]<max){
                root->right = new TreeNode(preorder[i]);
                solve(root->right,root->val,max,preorder,i+=1);
            }
            else return;
        }
        
    }


    striver:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int i=0;
        return solve(preorder,i,INT_MAX);
    }

    TreeNode* solve(vector<int> &a, int &i,int ub){
        if(i==a.size() || a[i]>ub) return NULL;
        TreeNode* root = new TreeNode(a[i++]);
        root->left=solve(a,i,root->val);
        root->right=solve(a,i,ub);
        return root;
    }
